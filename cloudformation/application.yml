---
AWSTemplateFormatVersion: 2010-09-09
# Parameters provided inline with default values
Parameters:
  awsRegion:
    Description: Provided AWSRegion
    Type: String
    Default: us-east-1
  cidrBlock:
    Description: Provided cidr block
    Type: String
    Default: 10.0.0.0/16
  subnetCidrBlock:
    Description: Provided AWSRegion
    Type: String
    Default: 10.0.0.0/16
  vpcName:
    Description: Provided Vpc Name
    Type: String
    Default: bajaj-m-vpc
  ec2Size:
    Description: Provided EC2 instance size
    Type: String
    Default: t2.micro
  rdsSize:
    Description: Provided RDS instance size
    Type: String
    Default: db.t3.micro
  rdsPublicAccess:
    Description: Provided RDS accesibility
    Type: String
    Default: false
  amiId:
    Description: Ami id provided
    Type: String
    Default: ami-0095bf27c1d96c053
  sshKey:
    Description: SSH key provided to attach to EC2 instance.
    Type: String
    Default: amazon_id_rsa
  port:
    Description: Provided host to connect with database
    Type: String
    Default: 3306
  dbUserName:
    Description: Provided database username
    Type: String
    Default: dbuser
  dbPassword:
    Description: Provided daabase password
    Type: String
    Default: Manorath96!
# Resources block
Resources:
  myVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref cidrBlock
      Tags:
        - Key: Name
          Value: !Ref vpcName
  # Subnets
  subnet1: 
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref awsRegion
      CidrBlock: !Select [ 0, !Cidr [ !Ref subnetCidrBlock, 3, 8 ]]
      VpcId: !Ref myVpc
      Tags:
        - Key: Name
          Value: !Join ["-",[!Ref vpcName,!Ref awsRegion,subnet1]]
  subnet2: 
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref awsRegion
      CidrBlock: !Select [ 1, !Cidr [ !Ref subnetCidrBlock, 2, 8 ]]
      VpcId: !Ref myVpc
      Tags:
        - Key: Name
          Value: !Join ["-",[!Ref vpcName,!Ref awsRegion,subnet2]]
  subnet3: 
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select 
        - 2
        - Fn::GetAZs: !Ref awsRegion
      CidrBlock: !Select [ 2, !Cidr [ !Ref subnetCidrBlock, 3, 8 ]]
      VpcId: !Ref myVpc
      Tags:
        - Key: Name
          Value: !Join ["-",[!Ref vpcName,!Ref awsRegion,subnet3]]
  dbsubnet:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: ye le bhai
      SubnetIds:
        - !Ref subnet3
        - !Ref subnet2 
  # Internet Gateway
  internetGateway:
    Type: AWS::EC2::InternetGateway
  # Attaching gateway to VPC
  attachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVpc
      InternetGatewayId: !Ref internetGateway
  # Route table
  routeTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVpc
      Tags:
        - Key: Name
          Value: !Join ["-",[!Ref vpcName,!Ref awsRegion,route-table]]
  # Attaching subnets to route table
  subnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref subnet1
      RouteTableId: !Ref routeTable
  subnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref subnet2
      RouteTableId: !Ref routeTable
  subnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref subnet3
      RouteTableId: !Ref routeTable
  # Public Route
  publicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref routeTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref internetGateway
  # Application Security Group
  applicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: applicationSecurityGroup
      GroupDescription: Allow http/https, ssh and trafic to 8080
      VpcId: !Ref myVpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: application-security-group
  # Database Security Group
  databaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref myVpc
      GroupDescription: Security group allowing ingress for database access to the application..
      GroupName: databaseSecurityGroup
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !Ref applicationSecurityGroup
  # S3 Bucket
  s3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
        - Id: STANDARD_IA_RULE
          Status: Enabled
          Transitions:
            - TransitionInDays: '30'
              StorageClass: STANDARD_IA
      Tags:
        - Key: Name
          Value: !Join ["-",[!Ref vpcName,!Ref awsRegion,s3-bucket]]
  # IAM Policy
  RootRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: EC2-CSYE6225
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: WebAppS3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:PutObject
                Resource:
                  Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - "Ref" : "s3Bucket"
                    - "/*"
  RootInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref RootRole          
  # RDS Instance
  rdsInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 10
      Engine: MySQL
      DBInstanceClass: !Ref rdsSize
      MultiAZ: false
      DBInstanceIdentifier: csye6225-spring2020
      MasterUsername: !Ref dbUserName
      MasterUserPassword: !Ref dbPassword
      DBSubnetGroupName: !Ref dbsubnet
      PubliclyAccessible: false
      DBName: csye6225
      VPCSecurityGroups: 
        - !Ref databaseSecurityGroup
    DependsOn: dbsubnet
  # EC2 Instance
  ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref ec2Size
      ImageId: !Ref amiId
      KeyName: !Ref sshKey
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash 
            - |
              set -e -x  
            - !Sub |
              sudo echo name=${dbUserName} >> /etc/profile.d/envvariable.sh 
            - |
              sudo echo export name >> /etc/profile.d/envvariable.sh 
            - !Sub >
              sudo echo password=${dbPassword} >>
              /etc/profile.d/envvariable.sh 
            - |
              sudo echo export password >> /etc/profile.d/envvariable.sh 
            - !Join 
              - ''
              - - 'echo host='
                - !GetAtt 
                  - rdsInstance
                  - Endpoint.Address
                - |
                  >> /etc/profile.d/envvariable.sh
            - |
              sudo echo export host >> /etc/profile.d/envvariable.sh      
            - !Join 
              - ''
              - - sudo echo bucketName=
                - !Ref s3Bucket
                - |
                  >> /etc/profile.d/envvariable.sh  
            - |
              sudo echo export bucketName >> /etc/profile.d/envvariable.sh
            - !Sub |
              sudo echo port=${port} >> /etc/profile.d/envvariable.sh
            - |
              sudo echo export port >> /etc/profile.d/envvariable.sh          
      DisableApiTermination: false
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs: 
            VolumeSize: 20 
            VolumeType: gp2
            DeleteOnTermination: true
      IamInstanceProfile: !Ref RootInstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet: 
            - !Ref applicationSecurityGroup
          SubnetId: !Ref subnet3
    DependsOn: rdsInstance
