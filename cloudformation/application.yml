---
AWSTemplateFormatVersion: 2010-09-09
# Parameters provided inline with default values
Parameters:
  awsRegion:
    Description: Provided AWSRegion
    Type: String
    Default: us-east-1
  cidrBlock:
    Description: Provided cidr block
    Type: String
    Default: 10.0.0.0/16
  subnetCidrBlock:
    Description: Provided AWSRegion
    Type: String
    Default: 10.0.0.0/16
  vpcName:
    Description: Provided Vpc Name
    Type: String
    Default: bajaj-m-vpc
  ec2Size:
    Description: Provided EC2 instance size
    Type: String
    Default: t2.micro
  rdsSize:
    Description: Provided RDS instance size
    Type: String
    Default: db.t3.micro
  rdsPublicAccess:
    Description: Provided RDS accesibility
    Type: String
    Default: false
  amiId:
    Description: Ami id provided
    Type: String
    Default: ami-07c1afe641c95f197
  sshKey:
    Description: SSH key provided to attach to EC2 instance.
    Type: String
    Default: amazon_id_rsa
  port:
    Description: Provided host to connect with database
    Type: String
    Default: 3306
  dbUserName:
    Description: Provided database username
    Type: String
    Default: dbuser
  dbPassword:
    Description: Provided daabase password
    Type: String
    Default: Manorath96!
  circleciusername:
    Type: String
    Default: cicd
  deploybucket:
    Type: String
    Default: codedeploy-prod.manorathbajaj.me
  domainName:
    Type: String
    Default: prod.manorathbajaj.me.
  certificateARN:
    Type: String
    Default: arn:aws:acm:us-east-1:612522715040:certificate/6cc3b816-b371-4c69-b89a-206b69198eeb
# Resources block
Resources:
  myVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref cidrBlock
      Tags:
        - Key: Name
          Value: !Ref vpcName
  # Subnets
  subnet1: 
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref awsRegion
      CidrBlock: !Select [ 0, !Cidr [ !Ref subnetCidrBlock, 3, 8 ]]
      VpcId: !Ref myVpc
      Tags:
        - Key: Name
          Value: !Join ["-",[!Ref vpcName,!Ref awsRegion,subnet1]]
  subnet2: 
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref awsRegion
      CidrBlock: !Select [ 1, !Cidr [ !Ref subnetCidrBlock, 2, 8 ]]
      VpcId: !Ref myVpc
      Tags:
        - Key: Name
          Value: !Join ["-",[!Ref vpcName,!Ref awsRegion,subnet2]]
  subnet3: 
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select 
        - 2
        - Fn::GetAZs: !Ref awsRegion
      CidrBlock: !Select [ 2, !Cidr [ !Ref subnetCidrBlock, 3, 8 ]]
      VpcId: !Ref myVpc
      Tags:
        - Key: Name
          Value: !Join ["-",[!Ref vpcName,!Ref awsRegion,subnet3]]
  dbsubnet:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: ye le bhai
      SubnetIds:
        - !Ref subnet3
        - !Ref subnet2 
  # Internet Gateway
  internetGateway:
    Type: AWS::EC2::InternetGateway
  # Attaching gateway to VPC
  attachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVpc
      InternetGatewayId: !Ref internetGateway
  # Route table
  routeTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVpc
      Tags:
        - Key: Name
          Value: !Join ["-",[!Ref vpcName,!Ref awsRegion,route-table]]
  # Attaching subnets to route table
  subnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref subnet1
      RouteTableId: !Ref routeTable
  subnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref subnet2
      RouteTableId: !Ref routeTable
  subnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref subnet3
      RouteTableId: !Ref routeTable
  # Public Route
  publicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref routeTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref internetGateway
  # Application Security Group
  applicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: applicationSecurityGroup
      GroupDescription: Allow http/https, ssh and trafic to 8080
      VpcId: !Ref myVpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: application-security-group
  # Database Security Group
  databaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref myVpc
      GroupDescription: Security group allowing ingress for database access to the application..
      GroupName: databaseSecurityGroup
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !Ref applicationSecurityGroup
  # S3 Bucket
  s3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
        - Id: STANDARD_IA_RULE
          Status: Enabled
          Transitions:
            - TransitionInDays: '30'
              StorageClass: STANDARD_IA
      Tags:
        - Key: Name
          Value: !Join ["-",[!Ref vpcName,!Ref awsRegion,s3-bucket]]
  # IAM Policy
  RootRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: EC2-CSYE6225
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: WebAppS3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:PutObject
                Resource:
                  Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - "Ref" : "s3Bucket"
                    - "/*"
  RootInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref RootRole          
  # RDS Instance
  rdsInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      AllocatedStorage: 10
      Engine: MySQL
      DBInstanceClass: !Ref rdsSize
      MultiAZ: false
      DBInstanceIdentifier: csye6225-spring2020
      MasterUsername: !Ref dbUserName
      MasterUserPassword: !Ref dbPassword
      DBSubnetGroupName: !Ref dbsubnet
      PubliclyAccessible: false
      DBName: csye6225
      VPCSecurityGroups: 
        - !Ref dbsecuritygroup
      StorageEncrypted: true
      DBParameterGroupName: !Ref dbParam
    DependsOn: dbsubnet
  # # EC2 Instance
  # ec2Instance:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     InstanceType: !Ref ec2Size
  #     ImageId: !Ref amiId
  #     KeyName: !Ref sshKey
  #     UserData: !Base64 
  #       'Fn::Join':
  #         - ''
  #         - - |
  #             #!/bin/bash 
  #           - |
  #             set -e -x  
  #           - !Sub |
  #             sudo echo name=${dbUserName} >> /etc/profile.d/envvariable.sh 
  #           - |
  #             sudo echo export name >> /etc/profile.d/envvariable.sh 
  #           - !Sub >
  #             sudo echo password=${dbPassword} >>
  #             /etc/profile.d/envvariable.sh 
  #           - |
  #             sudo echo export password >> /etc/profile.d/envvariable.sh 
  #           - !Join 
  #             - ''
  #             - - 'echo host='
  #               - !GetAtt 
  #                 - rdsInstance
  #                 - Endpoint.Address
  #               - |
  #                 >> /etc/profile.d/envvariable.sh
  #           - |
  #             sudo echo export host >> /etc/profile.d/envvariable.sh      
  #           - !Join 
  #             - ''
  #             - - sudo echo bucketName=
  #               - !Ref s3Bucket
  #               - |
  #                 >> /etc/profile.d/envvariable.sh  
  #           - |
  #             sudo echo export bucketName >> /etc/profile.d/envvariable.sh
  #           - !Sub |
  #             sudo echo port=${port} >> /etc/profile.d/envvariable.sh
  #           - |
  #             sudo echo export port >> /etc/profile.d/envvariable.sh          
  #     Tags:
  #       - Key: Name
  #         Value: EC2-CODEDEPLOY
  #     DisableApiTermination: false
  #     BlockDeviceMappings:
  #       - DeviceName: /dev/sda1
  #         Ebs: 
  #           VolumeSize: 20 
  #           VolumeType: gp2
  #           DeleteOnTermination: true
  #     IamInstanceProfile: !Ref ec2instanceprofile
  #     NetworkInterfaces:
  #       - AssociatePublicIpAddress: true
  #         DeviceIndex: 0
  #         GroupSet: 
  #           - !Ref applicationSecurityGroup
  #         SubnetId: !Ref subnet3
  #   DependsOn: rdsInstance
## Launch Configuration
  launchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      LaunchConfigurationName: asg_launch_config
      InstanceType: !Ref ec2Size
      PlacementTenancy: default
      ImageId: !Ref amiId
      IamInstanceProfile: !Ref ec2instanceprofile
      SecurityGroups:
        - !Ref webappsecuritygroup
      AssociatePublicIpAddress: true
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '20'
            VolumeType: gp2
            DeleteOnTermination: true
      KeyName: !Ref sshKey
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash 
            - |
              set -e -x  
            - !Sub |
              sudo echo name=${dbUserName} >> /etc/profile.d/envvariable.sh 
            - |
              sudo echo export name >> /etc/profile.d/envvariable.sh 
            - !Sub >
              sudo echo password=${dbPassword} >>
              /etc/profile.d/envvariable.sh 
            - |
              sudo echo export password >> /etc/profile.d/envvariable.sh 
            - !Join 
              - ''
              - - 'echo host='
                - !GetAtt 
                  - rdsInstance
                  - Endpoint.Address
                - |
                  >> /etc/profile.d/envvariable.sh
            - |
              sudo echo export host >> /etc/profile.d/envvariable.sh      
            - !Join 
              - ''
              - - sudo echo bucketName=
                - !Ref s3Bucket
                - |
                  >> /etc/profile.d/envvariable.sh  
            - |
              sudo echo export bucketName >> /etc/profile.d/envvariable.sh
            - !Sub |
              sudo echo port=${port} >> /etc/profile.d/envvariable.sh
            - |
              sudo echo export port >> /etc/profile.d/envvariable.sh
            - !Sub |
              sudo echo domainName=${domainName} >> /etc/profile.d/envvariable.sh
            - |
              sudo echo export domainName >> /etc/profile.d/envvariable.sh  
## Auto Scaling group
  WebServerGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AutoScalingGroupName: AutoScalingGroup
      Cooldown: '60'
      DesiredCapacity: 2
      LaunchConfigurationName: !Ref launchConfig
      VPCZoneIdentifier:
        - !Ref subnet1
        - !Ref subnet2 
      MaxSize: 5
      MinSize: 2
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      Tags:
        - Key: Name
          Value: EC2-CODEDEPLOY
          PropagateAtLaunch: true
## listners
  HttpListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref appLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref certificateARN
  Cert:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerCertificate'
    Properties:
      Certificates:
        - CertificateArn: !Ref certificateARN
      ListenerArn: !Ref HttpListener
## Scale Policy
  WebServerScaleUpPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerGroup
      Cooldown: '60'
      ScalingAdjustment: '1'
  WebServerScaleDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerGroup
      Cooldown: '60'
      ScalingAdjustment: '-1'
  CPUAlarmHigh:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-up if CPU > 5% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 5
      AlarmActions:
        - !Ref WebServerScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebServerGroup
      ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-down if CPU < 3% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 3
      AlarmActions:
        - !Ref WebServerScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebServerGroup
      ComparisonOperator: LessThanThreshold
## Load Balancer
  appLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: LoadBalancer
      Subnets:
        - !Ref subnet1 
        - !Ref subnet2
      SecurityGroups:
        - !Ref loadbalancersecuritygroup
      IpAddressType: ipv4
      Tags:
        - Key: NAME
          Value: EC2LOADBALANCER
##  Security Groups

  webappsecuritygroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref myVpc
      GroupDescription: Security group for web server
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !GetAtt 
            - loadbalancersecuritygroup
            - GroupId
  loadbalancersecuritygroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: LoadBalancer-Security-Group
      GroupDescription: Enable HTTPS via port 8080
      VpcId: !Ref myVpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
  dbsecuritygroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref myVpc
      GroupDescription: Ec2 security group for DB
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref webappsecuritygroup
          FromPort: 3306
          IpProtocol: tcp
          ToPort: 3306
  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: '8080'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 7
      HealthyThresholdCount: 3
      Name: TargetGroup
      Port: 8080
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 5
      VpcId: !Ref myVpc
      Matcher:
        HttpCode: '401,200'
  DNSRecord:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneName: !Ref domainName
      RecordSets:
        - Name: !Ref domainName
          Type: A
          AliasTarget:
            DNSName: !GetAtt 
              - appLoadBalancer
              - DNSName
            HostedZoneId: !GetAtt 
              - appLoadBalancer
              - CanonicalHostedZoneID
## Codedeploy 
  codedeployapplication:
    Type: 'AWS::CodeDeploy::Application'
    Properties:
      ApplicationName: csye6225-webapp
  Deploymentgroup:
    Type: 'AWS::CodeDeploy::DeploymentGroup'
    Properties:
      ApplicationName: !Ref codedeployapplication
      DeploymentGroupName: csye6225-webapp-deployment
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      AutoScalingGroups:
        - !Ref server
      LoadBalancerInfo:
        TargetGroupInfoList:
          - Name: !GetAtt 
              - ALBTargetGroup
              - TargetGroupName
      AutoRollbackConfiguration:
        Enabled: 'True'
        Events:
          - DEPLOYMENT_FAILURE
      ServiceRoleArn: !Join 
        - ''
        - - 'arn:aws:iam::'
          - !Ref Accountno
          - ':role/CodeDeployServiceRole'
      DeploymentStyle:
        DeploymentType: IN_PLACE
        DeploymentOption: WITH_TRAFFIC_CONTROL
      Ec2TagFilters:
        - Key: Name
          Type: KEY_AND_VALUE
          Value: EC2-CODEDEPLOY

  circleciec2ami:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: circleci-ec2-ami
      Users:
        - !Ref circleciusername
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'ec2:AttachVolume'
              - 'ec2:AuthorizeSecurityGroupIngress'
              - 'ec2:CopyImage'
              - 'ec2:CreateImage'
              - 'ec2:CreateKeypair'
              - 'ec2:CreateSecurityGroup'
              - 'ec2:CreateSnapshot'
              - 'ec2:CreateTags'
              - 'ec2:CreateVolume'
              - 'ec2:DeleteKeyPair'
              - 'ec2:DeleteSecurityGroup'
              - 'ec2:DeleteSnapshot'
              - 'ec2:DeleteVolume'
              - 'ec2:DeregisterImage'
              - 'ec2:DescribeImageAttribute'
              - 'ec2:DescribeImages'
              - 'ec2:DescribeInstances'
              - 'ec2:DescribeRegions'
              - 'ec2:DescribeSecurityGroups'
              - 'ec2:DescribeSnapshots'
              - 'ec2:DescribeSubnets'
              - 'ec2:DescribeTags'
              - 'ec2:DescribeVolumes'
              - 'ec2:DetachVolume'
              - 'ec2:GetPasswordData'
              - 'ec2:ModifyImageAttribute'
              - 'ec2:ModifyInstanceAttribute'
              - 'ec2:ModifySnapshotAttribute'
              - 'ec2:RegisterImage'
              - 'ec2:RunInstances'
              - 'ec2:StopInstances'
              - 'ec2:TerminateInstances'
            Resource: '*'
  CodeDeployEC2S3:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: CodeDeploy-EC2-S3
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:Get*'
              - 's3:List*'
            Effect: Allow
            Resource:
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref deploybucket
                  - /*
  CircleCIUploadToS3:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: CircleCI-Upload-To-S3
      Users:
        - !Ref circleciusername
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:PutObject'
            Effect: Allow
            Resource:
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref deploybucket
                  - /*
  CirlceCICodeDeploy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: CirlceCI-Code-Deploy
      Users:
        - !Ref circleciusername
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'codedeploy:RegisterApplicationRevision'
              - 'codedeploy:GetApplicationRevision'
            Effect: Allow
            Resource:
              - !Join 
                - ''
                - - 'arn:aws:codedeploy:us-east-1:'
                  - !Ref 'AWS::AccountId'
                  - ':application:csye6225-webapp'
          - Action:
              - 'codedeploy:CreateDeployment'
              - 'codedeploy:GetDeployment'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'codedeploy:GetDeploymentConfig'
            Effect: Allow
            Resource:
              - !Join 
                - ''
                - - 'arn:aws:codedeploy:us-east-1:'
                  - !Ref 'AWS::AccountId'
                  - ':deploymentconfig:CodeDeployDefault.OneAtATime'
              - !Join 
                - ''
                - - 'arn:aws:codedeploy:us-east-1:'
                  - !Ref 'AWS::AccountId'
                  - ':deploymentconfig:CodeDeployDefault.HalfAtATime'
              - !Join 
                - ''
                - - 'arn:aws:codedeploy:us-east-1:'
                  - !Ref 'AWS::AccountId'
                  - ':deploymentconfig:CodeDeployDefault.AllAtOnce'
  CodeDeployEC2ServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: CodeDeployEC2ServiceRole
      ManagedPolicyArns:
        - !Ref CodeDeployEC2S3
        - !Ref AccessAttachmentToS3Bucket
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/AWSLambdaFullAccess
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
  CodeDeployServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: CodeDeployServiceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole'
  ec2instanceprofile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: CodeDeployEC2ServiceRoleProfile
      Roles:
        - !Ref CodeDeployEC2ServiceRole
  AccessAttachmentToS3Bucket:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: Access-Attachment-To-S3-Bucket
      Description: Policy for uploading attachments into S3
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:Get*'
              - 's3:List*'
              - 's3:Delete*'
              - 's3:Put*'
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - "Ref" : "s3Bucket"
                    - "/*"
  codedeployapplication:
    Type: 'AWS::CodeDeploy::Application'
    Properties:
      ApplicationName: csye6225-webapp
  Deploymentgroup:
    Type: 'AWS::CodeDeploy::DeploymentGroup'
    Properties:
      ApplicationName: !Ref codedeployapplication
      DeploymentGroupName: csye6225-webapp-deployment
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      AutoRollbackConfiguration:
        Enabled: 'True'
        Events:
          - DEPLOYMENT_FAILURE
      ServiceRoleArn: !GetAtt 
        - CodeDeployServiceRole
        - Arn
      DeploymentStyle:
        DeploymentType: IN_PLACE
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
      Ec2TagFilters:
        - Key: Name
          Type: KEY_AND_VALUE
          Value: EC2-CODEDEPLOY
########## Lambda
  lambdaexecutionrole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: lambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSESFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
#####  Lambda 
  snsTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: email_due_patients
      Subscription:
        - Endpoint: !GetAtt 
            - lambdaFunction
            - Arn
          Protocol: lambda
  lambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: SendEmailOnSNS
      MemorySize: 512
      Code: 
        S3Bucket: !Ref deploybucket
        S3Key: serverless-1.0-SNAPSHOT.zip
      Role: !GetAtt 
        - lambdaexecutionrole
        - Arn
      Timeout: 90
      Environment:
        Variables:
          DOMAIN_NAME: !Ref domainName
      Handler: 'SendEmail::handleRequest'
      Runtime: java11
  dynamoTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 5
      TimeToLiveSpecification:
        AttributeName: TTL
        Enabled: 'TRUE'
      TableName: csye6225
  lambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:*'
      FunctionName: !GetAtt 
        - lambdaFunction
        - Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref snsTopic
  myQueue: 
    Type: AWS::SQS::Queue
    Properties: 
      QueueName: bills-due-queue
### Adding performance Schema
  dbParam:
    Type: AWS::RDS::DBParameterGroup
    Properties: 
      Description: parameter group
      Family: MySQL5.7
      Parameters: 
        performance_schema : 1
